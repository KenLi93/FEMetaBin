y0=pain.gp[[i]]$measure[(j-1)*4+k],
x1=pain.gp[[i]]$period[(j-1)*4+k+1],
y1=pain.gp[[i]]$measure[(j-1)*4+k+1],
col="darkblue",lwd=0.5)
}
}
}
par(mfrow=c(2,2),mar=c(2,3,3,2),cex=0.8)
for(i in 1:3){
temp.pain <- pain.gp[[i]]
temp.base <- temp.pain$measure[seq(1,(nrow(temp.pain)-3),by=4)]
temp.meas <- temp.pain$measure-rep(temp.base,each=4)
set.seed(1)
plot(temp.meas~temp.pain$period,xaxt="n",ylim=c(-8,8),pch=16)
axis(1,at=1:4,labels=1:4)
for(j in 1:(nrow(temp.pain)/4)){
for(k in 1:3){
segments(x0=temp.pain$period[(j-1)*4+k],
y0=temp.meas[(j-1)*4+k],
x1=temp.pain$period[(j-1)*4+k+1],
y1=temp.meas[(j-1)*4+k+1],
col="darkblue",lwd=0.5)
}
}
}
par(mfrow=c(2,2),mar=c(2,3,3,2),cex=0.8)
for(i in 1:3){
temp.pain <- pain.gp[[i]]
temp.meas1 <- temp.pain$measure[temp.pain$period==1]
temp.meas2 <- temp.pain$measure[temp.pain$period==2]
temp.meas3 <- temp.pain$measure[temp.pain$period==3]
temp.meas4 <- temp.pain$measure[temp.pain$period==4]
meas.mean <- c(mean(temp.meas1),mean(temp.meas2),mean(temp.meas3),mean(temp.meas4))
for(j in 1:(nrow(temp.pain)/4)){
for(k in 1:4){
temp.pain$measure[(j-1)*4+k]=(temp.pain$measure[(j-1)*4+k]-meas.mean[k])
}
}
plot(temp.pain$measure~temp.pain$period,xaxt="n",pch=16)
axis(1,at=1:4,labels=1:4)
for(j in 1:(nrow(temp.pain)/4)){
for(k in 1:3){
segments(x0=k,
y0=temp.pain$measure[(j-1)*4+k],
x1=k+1,
y1=temp.pain$measure[(j-1)*4+k+1],
col="darkblue",lwd=0.5)
}
}
}
par(mfrow=c(2,2),mar=c(2,3,3,2),cex=0.8)
for(i in 1:3){
temp.pain <- pain.gp[[i]]
temp.meas1 <- temp.pain$measure[temp.pain$period==1]
temp.meas2 <- temp.pain$measure[temp.pain$period==2]
temp.meas3 <- temp.pain$measure[temp.pain$period==3]
temp.meas4 <- temp.pain$measure[temp.pain$period==4]
meas.mean <- c(mean(temp.meas1),mean(temp.meas2),mean(temp.meas3),mean(temp.meas4))
meas.sd <- c(sd(temp.meas1),sd(temp.meas2),sd(temp.meas3),sd(temp.meas4))
for(j in 1:(nrow(temp.pain)/4)){
for(k in 1:4){
temp.pain$measure[(j-1)*4+k]=(temp.pain$measure[(j-1)*4+k]-meas.mean[k])/meas.sd[k]
}
}
plot(temp.pain$measure~temp.pain$period,xaxt="n",pch=16)
axis(1,at=1:4,labels=1:4)
for(j in 1:(nrow(temp.pain)/4)){
for(k in 1:3){
segments(x0=k,
y0=temp.pain$measure[(j-1)*4+k],
x1=k+1,
y1=temp.pain$measure[(j-1)*4+k+1],
col="darkblue",lwd=0.5)
}
}
}
library(nlme)
pain.long[,1] <- as.factor(pain.long[,1])
pain.long[,2] <- as.factor(pain.long[,2])
pain.long[,3] <- as.numeric(pain.long[,3])
mod <- list()
mod[[6]] <- gls(measure~period,
corr=corSymm(form=~1|id),
weights=varIdent(form=~1|period),
data=pain.long,method="ML")
mod[[9]] <- lme(measure~period,
weights=varIdent(form=~1|period),
data=pain.long, method="ML",
random=reStruct(object=list(~1|id,~period|group),pdClass="pdSymm"))
cov.exp <- getVarCov(mod6)
mod[[10]] <- gls(measure~period,
data=pain.long,
corr=corAR1(form=~1|id),
weights=varIdent(form=~1|period),
method="ML"
)
mod[[1]] <- gls(measure~period,
data=pain.long,
corr=corSymm(form=~1|id),
weights=varIdent(form=~1),
method="ML"
)
mod[[2]] <- lme(measure~period,
random=reStruct(~1|id),
data=pain.long,
weights=varIdent(form=~1|period),
method="ML")
mod[[3]] <- lme(measure~period,
random=reStruct(list(~1|id,~1+period|group),
pdClass="pdDiag"),
data=pain.long,
weights=varIdent(form=~1),
method="ML")
mod[[4]] <- lme(measure~period,
random=reStruct(list(~1|id,~1+period|group),
pdClass="pdSymm"),
data=pain.long,
weights=varIdent(form=~1),
method="ML")
mod[[5]] <- gls(measure~period,
data=pain.long,
weights=varIdent(form=~1),
method="ML",
corr=corAR1(form=~1|id))
mod[[7]] <- lme(fixed=measure~period,
random=~1|id,
weights=varIdent(form=~1|period),
method="ML",
data=pain.long)
mod[[8]] <- lme(fixed=measure~period,
random=reStruct(list(~1|id,~period|group),
pdClass="pdDiag"),
data=pain.long,
method="ML",
weights=varIdent(~1|period))
p.beta <- beta.period <- mod.aic <- rep(NA,10)
for(i in 1:10){
if(class(mod[[i]])=="gls"){
beta.period[i] <- coef(mod[[i]])[2]
} else
beta.period[i] <- fixed.effects(mod[[i]])[2]
mod.aic[i] <- summary(mod[[i]])$AIC
}
p.beta <- c("<0.001","<0.001","<0.001","<0.001","<0.001",
"<0.001","<0.001","<0.001","<0.001","<0.001")
## summary(mod)$AIC
beta.period
mod.aic[c(6,9,10)]
mod[[9]]
beta.sum <- paste(round(beta.period,3),"(",p.beta,
")",sep="")
beta.sum
model <- c("(i)","(ii)","(iii)","(iv)","(v)",
"(vi)","(vii)","(viii)","(ix)","(x)")
model
mod.sum <- data.frame(model=model, beta=beta.sum,aic=mod.aic)
mod.sum
colnames(mod.sum) <- c("Model","$\\hat\\beta$(p-value)","AIC")
mod.aic[c(6,9,10)]
mod[[10]]
??xtable::print.xtable
library(SpiecEasi)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)
SpiecEasi:::spiec.easi.default()
SpiecEasi:::spiec.easi.default
SpiecEasi:::icov.select()
SpiecEasi:::icov.select
?icov.select
huge::huge.stars
install.packages("huge")
install.packages("huge")
library(huge)
huge::huge.stars
huge::huge.select()
huge::huge.select
?contour
boeing.lrt <- function(p, x1, x2){
(p/(1-p))^x1*(3*p^2/(1-p^2))^x2
}
boeing.lrt(0.5,3,4)
boeing.lrt(0.5,3,5)
boeing.lrt(0.6,3,5)
boeing.lrt(0.7,3,5)
boeing.lrt(0.8,3,5)
boeing.lrt <- function(p, x1, x2){
log((p/(1-p))^x1*(3*p^2/(1-p^2))^x2)
}
boeing.lrt(0.8,3,5)
n=10
x1 <- rep(0:n, n+1)
x1
x2 <- rep(0:n, each = n+1)
xw
x2
p=0.6
log.lambda <- boeing.lrt(p, x1, x2)
log.lambda
contour(x = x1, y = x2, z = log.lambda)
order(x1)
log.lambda.mat <- matrix(log.lambda, nrow = n+1, byrow = T)
head(log.lambda.mat)
contour(x = 0:n, y = 0:n, z = log.lambda.mat)
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda <- boeing.lrt(p, x1, x2)
log.lambda.mat <- matrix(log.lambda, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat)
log.lambda.0.6 <- boeing.lrt(p, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6)
?contour
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda.0.6 <- boeing.lrt(0.6, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda.0.6, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6)
log.lambda.0.7 <- boeing.lrt(p, x1, x2)
log.lambda.mat.0.7 <- matrix(log.lambda.0.7, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.7, add = T)
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda.0.6 <- boeing.lrt(0.6, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda.0.6, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6)
log.lambda.0.7 <- boeing.lrt(0.7, x1, x2)
log.lambda.mat.0.7 <- matrix(log.lambda.0.7, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.7, add = T, col = "red")
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda.0.6 <- boeing.lrt(0.6, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda.0.6, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6)
log.lambda.0.7 <- boeing.lrt(0.8, x1, x2)
log.lambda.mat.0.7 <- matrix(log.lambda.0.7, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.7, add = T, col = "red")
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda.0.6 <- boeing.lrt(0.55, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda.0.6, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6)
log.lambda.0.7 <- boeing.lrt(0.9, x1, x2)
log.lambda.mat.0.7 <- matrix(log.lambda.0.7, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.7, add = T, col = "red")
title(paste("n = ",n, paste=""))
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda.0.6 <- boeing.lrt(0.55, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda.0.6, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6)
log.lambda.0.7 <- boeing.lrt(0.95, x1, x2)
log.lambda.mat.0.7 <- matrix(log.lambda.0.7, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.7, add = T, col = "red")
title(paste("n = ",n, paste=""))
log.lambda.0.7 <- boeing.lrt(0.95, x1, x2, xlab = expression(X[1]), ylab = expression(X[2]))
x1 <- rep(0:n, n+1)
x2 <- rep(0:n, each = n+1)
log.lambda.0.6 <- boeing.lrt(0.55, x1, x2)
log.lambda.mat.0.6 <- matrix(log.lambda.0.6, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.6, , xlab = expression(X[1]), ylab = expression(X[2]))
log.lambda.0.7 <- boeing.lrt(0.95, x1, x2)
log.lambda.mat.0.7 <- matrix(log.lambda.0.7, nrow = n+1, byrow = T)
contour(x = 0:n, y = 0:n, z = log.lambda.mat.0.7, add = T, col = "red")
title(paste("Contour of the likelihood function, n = ",n, paste=""))
install.packages("rsparcc")
library(SpiecEasi)
?make_graph
graph <- make_graph("band", D = 8, e = 16)
graph
plot(graph)
plotnet(graph)
plot(graph, layout = coord)
library(igraph)
?make_graph
library(SpiecEasi)
graph <- make_graph("band", D = 8, e = 16)
plot(graph, layout = coord)
library(SpiecEasi)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
plot(graph, layout = coord)
?plot.igraph
?as.igraph
set.seed(1001)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
?fit_hrg
as.igraph(graph)
as.igraph(as.matrix(graph))
?plot.graph
b<- graph(graph)
graph <- as.matrix(graph)
b <- graph(graph)
set.seed(1001)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
graph.mat <- as.matrix(graph)
a <- numeric(0)
for(i in 1:nrow(x)){
a <- c(a, graph.mat[i,])
}
b <- graph(a)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
graph.mat <- as.matrix(graph)
a <- numeric(0)
for(i in 1:nrow(graph.mat)){
a <- c(a, graph.mat[i,])
}
b <- graph(a)
a
?graph
b <- igraph::make_graph(a)
set.seed(1001)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
set.seed(1001)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
graphii <- adj2igraph(graph)
plot(graphii)
?plot(igraph)
?plot.igraph
plot(graphii)
library(SpiecEasi)
set.seed(1001)
graph <- SpiecEasi::make_graph("band", D = 8, e = 16)
prec <- adj2Prec(graph)
?adj2prec
prec <- graph2Prec(graph)
prec <- graph2prec(graph)
prec
prec <- graph2prec(graph, cond)
?graph2prec
round(prec, 2)
library(devtools)
intall_github("adw96/CatchAll")
install_github("adw96/CatchAll")
treatment <- 1:2
stratum <- 1:3
test.dataset <- expand.grid(treatment, stratum)
test.dataset
test.dataset <- expand.grid(1:2, 1:3)
test.dataset$x <- rbinom(6, 100, 0.6)
test.dataset
test.dataset$n <- rep(100, 6)
test.dataset <- expand.grid(1:2, 1:3)
names(test.dataset) <- c("treatment", "stratum")
test.dataset$n <- rep(100, 6)
test.dataset$x <- rbinom(6, 100, 0.6)
test.dataset
plot.default
plot
plot.function
graphics:::plot.formula()
graphics:::plot.formula
??.C
?.C
#!/bin/Rscript
## n: number of subjects in each group
## x: number of responders in each group
## toy example. Case: treatment = 2.
groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
## case: specify which group is case
statifiedFisherTest <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i], log=TRUE)
}
#  pv <- 0
x_grid <- rowSums(expand.grid(x_range))
x_prob_grid <- exp(rowSums(expand.grid(x_prob)))
if (side == "up") {
pv <- sum( x_prob_grid [ x_grid>= s ] )
} else if (side == "lower") {
pv <- sum( x_prob_grid [ x_grid<= s ] )
} else if (side == "both") {
pv.up <- pv.lower <- 0
for(i in 1:nrow(x_grid)){
if(sum(x_grid[i,]) >= s) pv.up <- pv.up + prod(x_prob_grid[i,])
if(sum(x_grid[i,]) <= s) pv.lower <- pv.lower + prod(x_prob_grid[i,])
}
pv <- 2 * min(pv.up, pv.lower)
} else {
stop("side should be one of \"up\", \"lower\" or \"both\".")
}
return(pv)
}
system.time(pv.up <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "up"))
pv.up
groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
data
#!/bin/Rscript
## n: number of subjects in each group
## x: number of responders in each group
## toy example. Case: treatment = 2.
groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
data
expand.grid
expand.grid
#!/bin/Rscript
## n: number of subjects in each group
## x: number of responders in each group
## toy example. Case: treatment = 2.
groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
## case: specify which group is case
statifiedFisherTest <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i])
}
args <- list(1:5, 1:2, 1:3)
args
lengths(args)
rep.fac = 1
nx
3
nx <- 3
rep.int(rep.fac,
nx)
seq_len(nx)
rep.int(seq_len(nx), rep.int(rep.fac,
nx))
rep.int(seq_len(nx), rep.int(2,
nx))
?rep1
?rep.int
rep.int
install.packages("devtools")
devtools::install_github("adw96/breakaway")
for(k in 1:50) {
print(k)
print(0.96 ^ k * 0.0003 / (0.96 ^ k * 0.0003 + 0.07 ^ k * 0.9997))
}
View(log.lambda.mat.0.6)
library(devtools)
install_github("KenLi93/FEMetaBin")
browseVignettes("FEMetaBin")
setwd("E:/github/FEMetaBin")
document()
library(devtools)
document()
document()
?build()
build(path = "..")
